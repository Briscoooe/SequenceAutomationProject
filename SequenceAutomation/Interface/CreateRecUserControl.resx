<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAQEAYABgAAD/4QCuRXhpZgAATU0AKgAAAAgAAYdpAAQAAAABAAAAGgAAAAAAAZKG
        AAcAAAB6AAAALAAAAABDAFIARQBBAFQATwBSADoAIABnAGQALQBqAHAAZQBnACAAdgAxAC4AMAAgACgA
        dQBzAGkAbgBnACAASQBKAEcAIABKAFAARQBHACAAdgA2ADIAKQAsACAAZABlAGYAYQB1AGwAdAAgAHEA
        dQBhAGwAaQB0AHkACgAAAP/bAEMACAYGBwYFCAcHBwkJCAoMFA0MCwsMGRITDxQdGh8eHRocHCAkLicg
        IiwjHBwoNyksMDE0NDQfJzk9ODI8LjM0Mv/bAEMBCQkJDAsMGA0NGDIhHCEyMjIyMjIyMjIyMjIyMjIy
        MjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMv/AABEIARgB8AMBIgACEQEDEQH/xAAfAAAB
        BQEBAQEBAQAAAAAAAAAAAQIDBAUGBwgJCgv/xAC1EAACAQMDAgQDBQUEBAAAAX0BAgMABBEFEiExQQYT
        UWEHInEUMoGRoQgjQrHBFVLR8CQzYnKCCQoWFxgZGiUmJygpKjQ1Njc4OTpDREVGR0hJSlNUVVZXWFla
        Y2RlZmdoaWpzdHV2d3h5eoOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK
        0tPU1dbX2Nna4eLj5OXm5+jp6vHy8/T19vf4+fr/xAAfAQADAQEBAQEBAQEBAAAAAAAAAQIDBAUGBwgJ
        Cgv/xAC1EQACAQIEBAMEBwUEBAABAncAAQIDEQQFITEGEkFRB2FxEyIygQgUQpGhscEJIzNS8BVictEK
        FiQ04SXxFxgZGiYnKCkqNTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqCg4SFhoeI
        iYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2dri4+Tl5ufo6ery8/T1
        9vf4+fr/2gAMAwEAAhEDEQA/ANwCngU0U8CgBwFPApoFPFADgKeBTQKeBQAop4FIBTwKAFApwFAFOAoA
        UCnAUAU4CgBQKcBQBTgKAACnAUAU4CgAApwFAFOAoAQCnYpQKUCgBAKXFLilAoATFLilxS4oATFGKdij
        FACYoxTsUYoAbijFOxRigBuKTFPxSYoAbikxT8UmKAGYoxT8UmKAI8UmKkIppFADCKaRUmKQigCMimkV
        IRTSKAIyKaRUhFNIoAiIppFS7aaRQBEVzTStSkU0igCIimEVKRTCKAIiKYRUpFMIoAiIphFSkVGRQBER
        TCKlIphFAERFRkVKRTCKAIjTDUpFRkUARmmEVIaYaANIU8U0CnigBwFPApoFPFADhTwKaKeBQA4U4Ugp
        4oAUCngUgFPAoAUU4CkAp4FACgU4CkApwFACgU4CgCnAUAAFOAoApwFACAU4CgCnAUAJilxSgUuKAExS
        4paXFACYoxTsUYoATFGKdijFADcUYp2KMUANxSYp+KTFADcUmKfijFADMUmKdigigBmKaRUmKbigBhFN
        IqQikxQBGRTSKl20hFAERWmkVKRTCKAIyKaRUhFNIoAiIppFSEUwigCMimEVKRUZFAEZFMYVKRUZFAER
        FMNSkUwigCIioyKlIphFAERFMIqQimEUAREUwipSKjNAERFMNSmozQBpCniminigBwFPFNAp4oAcKeBT
        RTxQA8U4CkAp4FACgU8CmingUAOApwpBTxQAoFOApBTgKAFFOAoApwFAABTgKAKcKAAClAoApwFAABSg
        UYp2KAExS4pcUuKAExRilxS4oATFGKWloAbijFOxRigBuKTFOoxQA3FJinYoxQAzFJin4oxQBHijFPxS
        EUAMxSEU/FNIoAYRTSKkIppoAjIppFSGmkUARkUwipCKaRQBGaYRUhppFAERFMIqUimEUAREUwipTUZF
        AEZFRkVKaYRQBERTDUhphoAiNRmpSKYaAIjUZqU1GaAIzUZFSmmGgDRFPFMFSCgBwp4pop4oAcKkFMFP
        FADxTxTRTxQA4U4UgFOAoAcBTxTRTxQAoFPFNFPFACinCkFOFACgU4CkFOFACilAopwoABSgUU7FACUt
        FOxQAmKMUuKXFACYopaKAExRinUYoAbikxT8UYoAZijFPpKAG0lOxSYoAbikxTqQ0AMIpCKfimmgBhFN
        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
        /9k=
</value>
  </data>
</root>