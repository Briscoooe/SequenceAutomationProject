<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAQEAYABgAAD/4QC2RXhpZgAATU0AKgAAAAgAAYdpAAQAAAABAAAAGgAAAAAAAZKG
        AAcAAACAAAAALAAAAABVTklDT0RFAABDAFIARQBBAFQATwBSADoAIABnAGQALQBqAHAAZQBnACAAdgAx
        AC4AMAAgACgAdQBzAGkAbgBnACAASQBKAEcAIABKAFAARQBHACAAdgA2ADIAKQAsACAAZABlAGYAYQB1
        AGwAdAAgAHEAdQBhAGwAaQB0AHkACgAA/9sAQwAIBgYHBgUIBwcHCQkICgwUDQwLCwwZEhMPFB0aHx4d
        GhwcICQuJyAiLCMcHCg3KSwwMTQ0NB8nOT04MjwuMzQy/9sAQwEJCQkMCwwYDQ0YMiEcITIyMjIyMjIy
        MjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIy/8AAEQgBGAHwAwEiAAIRAQMR
        Af/EAB8AAAEFAQEBAQEBAAAAAAAAAAABAgMEBQYHCAkKC//EALUQAAIBAwMCBAMFBQQEAAABfQECAwAE
        EQUSITFBBhNRYQcicRQygZGhCCNCscEVUtHwJDNicoIJChYXGBkaJSYnKCkqNDU2Nzg5OkNERUZHSElK
        U1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6g4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrC
        w8TFxsfIycrS09TV1tfY2drh4uPk5ebn6Onq8fLz9PX29/j5+v/EAB8BAAMBAQEBAQEBAQEAAAAAAAAB
        AgMEBQYHCAkKC//EALURAAIBAgQEAwQHBQQEAAECdwABAgMRBAUhMQYSQVEHYXETIjKBCBRCkaGxwQkj
        M1LwFWJy0QoWJDThJfEXGBkaJicoKSo1Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5
        eoKDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uLj5OXm
        5+jp6vLz9PX29/j5+v/aAAwDAQACEQMRAD8A3AKeBTRTwKAHAU8CmgU8UAOAp4FNAp4FACingUgFPAoA
        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
        gBhNNNFFAH//2Q==
</value>
  </data>
</root>